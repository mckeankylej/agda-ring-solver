{-# OPTIONS --without-K #-}

module Modular where

open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero)
open import Data.Bool as Bool using (Bool; true; false)
open import Function
open import Data.Product
open import Data.Empty
open import Data.Unit using (‚ä§; tt)
open import Relation.Nullary
open import Relation.Binary hiding (_‚áí_)
open import Relation.Binary.PropositionalEquality
open import Data.Sum as Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
import Data.Empty.Irrelevant as Irrel

open import Data.Nat.Order.Smaller public using (_‚â•_; m‚â•m; s‚â•m; toNat; 0‚âØm; ‚â•-pred; m‚â•0; n+m‚â•m; toNat-‚â•)

Mod : ‚Ñï ‚Üí Set
Mod = ‚àÉ ‚àò _‚â•_

incr : ‚àÄ {n} ‚Üí Mod n ‚Üí Mod n √ó Bool
incr (zero   , pr) = (_  , m‚â•m   ), true
incr (suc sp , pr) = (sp , s‚â•m pr), false

fromNat : ‚àÄ {n} m ‚Üí .(n‚â•m : n ‚â• m) ‚Üí  Œ£[ n-m ‚àà Mod n ] toNat (proj‚ÇÇ n-m) ‚â° m
fromNat zero n‚â•m = (_ , m‚â•m), refl
fromNat (suc m) n‚â•m with fromNat m (s‚â•m n‚â•m)
... | (suc s , p  ), x‚â°m  = (s , s‚â•m p), cong suc x‚â°m
... | (zero  , n‚â•0), refl = Irrel.‚ä•-elim (contra _ zero n‚â•0 n‚â•m)
  where
  import Data.Nat.Properties as Prop

  n‚â±sk+n : ‚àÄ n k {sk+n} ‚Üí sk+n ‚â° suc k ‚Ñï.+ n ‚Üí n ‚â• sk+n ‚Üí ‚ä•
  n‚â±sk+n n k wit (s‚â•m n‚â•sk+n) = n‚â±sk+n n (suc k) (cong suc wit) n‚â•sk+n
  n‚â±sk+n n k wit m‚â•m with Prop.+-cancel ≥-‚â° 0 (suc k) wit
  ... | ()

  contra : ‚àÄ n m ‚Üí (n‚â•m : n ‚â• m) ‚Üí n ‚â• suc (m ‚Ñï.+ toNat n‚â•m) ‚Üí ‚ä•
  contra n m m‚â•m n‚â•st = n‚â±sk+n n zero (cong suc (Prop.+-comm n 0)) n‚â•st
  contra n m (s‚â•m n‚â•m) n‚â•st = contra n (suc m) n‚â•m (subst (Œª x ‚Üí n ‚â• suc x) (Prop.+-suc m (toNat n‚â•m)) n‚â•st)

-_ : ‚àÄ {n} ‚Üí Mod n ‚Üí Mod n
-_ (m , n‚â•m) = proj‚ÇÅ (fromNat m n‚â•m)

infix 4 _‚âü_
_‚âü_ : ‚àÄ {n} (x y : Mod n) ‚Üí Dec (x ‚â° y)
_‚âü_ {p} (_ , p‚â•d‚ÇÅ) (_ , p‚â•d‚ÇÇ) = go p‚â•d‚ÇÅ p‚â•d‚ÇÇ
  where
  go : ‚àÄ {d‚ÇÅ} (p‚â•d‚ÇÅ : p ‚â• d‚ÇÅ) ‚Üí ‚àÄ {d‚ÇÇ} (p‚â•d‚ÇÇ : p ‚â• d‚ÇÇ) ‚Üí Dec ((d‚ÇÅ , p‚â•d‚ÇÅ) ‚â° (d‚ÇÇ , p‚â•d‚ÇÇ))
  go m‚â•m m‚â•m = yes refl
  go m‚â•m (s‚â•m p‚â•d‚ÇÇ) = no (Œª ())
  go (s‚â•m p‚â•d‚ÇÅ) m‚â•m = no (Œª ())
  go (s‚â•m p‚â•d‚ÇÅ) (s‚â•m p‚â•d‚ÇÇ) with go p‚â•d‚ÇÅ p‚â•d‚ÇÇ
  go (s‚â•m p‚â•d‚ÇÅ) (s‚â•m .p‚â•d‚ÇÅ) | yes refl = yes refl
  go (s‚â•m p‚â•d‚ÇÅ) (s‚â•m p‚â•d‚ÇÇ) | no ¬¨p = no Œª { refl ‚Üí ¬¨p refl }

-- ùí™(n)
infixl 6 _+_
_+_ : ‚àÄ {p} (x y : Mod p) ‚Üí Mod p √ó Bool
_+_ {p} (d‚ÇÅ , p‚â•d‚ÇÅ) (d‚ÇÇ , p‚â•d‚ÇÇ) = go d‚ÇÅ p‚â•d‚ÇÅ d‚ÇÇ p‚â•d‚ÇÇ
  where
  go : ‚àÄ d‚ÇÅ ‚Üí p ‚â• d‚ÇÅ ‚Üí ‚àÄ d‚ÇÇ ‚Üí p ‚â• d‚ÇÇ ‚Üí Mod p √ó Bool
  go d‚ÇÅ m‚â•m d‚ÇÇ p‚â•d‚ÇÇ = (d‚ÇÇ , p‚â•d‚ÇÇ), false
  go d‚ÇÅ (s‚â•m p‚â•d‚ÇÅ) zero p‚â•d‚ÇÇ = (suc d‚ÇÅ , p‚â•d‚ÇÅ), true
  go d‚ÇÅ (s‚â•m p‚â•d‚ÇÅ) (suc d‚ÇÇ) p‚â•d‚ÇÇ = go (suc d‚ÇÅ) p‚â•d‚ÇÅ d‚ÇÇ (s‚â•m p‚â•d‚ÇÇ)

-- ùí™(n)
infixl 7 _*_
_*_ : ‚àÄ {p} ‚Üí (x y : Mod p) ‚Üí Mod p √ó Mod p
_*_ {p} x (_ , y) = go (_ , m‚â•m) m‚â•m y (toNat-‚â• y)
  where
  go : (s : Mod p)
     ‚Üí ‚àÄ {d‚ÇÅ} (c : p ‚â• d‚ÇÅ)
     ‚Üí ‚àÄ {d‚ÇÇ} (y : p ‚â• d‚ÇÇ)
     ‚Üí .(l : d‚ÇÅ ‚â• toNat y)
     ‚Üí Mod p √ó Mod p
  go s c m‚â•m _ = s , (_ , c)
  go s c (s‚â•m p‚â•d) l with x + s
  go s c (s‚â•m p‚â•d) l          | s‚Ä≤ , false = go s‚Ä≤ c p‚â•d (s‚â•m l)
  go s {suc d‚ÇÅ} c (s‚â•m p‚â•d) l | s‚Ä≤ , true  = go s‚Ä≤ (s‚â•m c) p‚â•d (‚â•-pred l)
  go s {zero}   c (s‚â•m p‚â•d) l | s‚Ä≤ , true  = Irrel.‚ä•-elim (0‚âØm l)

module Order {p : ‚Ñï} where
  data _‚â§_ : Mod p ‚Üí Mod p ‚Üí Set where
    z‚â§m : ‚àÄ {n} ‚Üí (p , m‚â•m) ‚â§ n
    s‚â§s : ‚àÄ {n‚Ä≤ m‚Ä≤ n m} ‚Üí (suc n‚Ä≤ , n) ‚â§ (suc m‚Ä≤ , m) ‚Üí (_ , s‚â•m n) ‚â§ (_ , s‚â•m m)

  _‚â§?_ : Decidable _‚â§_
  (d‚ÇÅ , p‚â•d‚ÇÅ) ‚â§? (d‚ÇÇ , p‚â•d‚ÇÇ) = go p‚â•d‚ÇÅ p‚â•d‚ÇÇ
    where
    go : ‚àÄ {d‚ÇÅ} ‚Üí (p‚â•d‚ÇÅ : p ‚â• d‚ÇÅ) ‚Üí ‚àÄ {d‚ÇÇ} (p‚â•d‚ÇÇ : p ‚â• d‚ÇÇ) ‚Üí Dec ((d‚ÇÅ , p‚â•d‚ÇÅ) ‚â§ (d‚ÇÇ , p‚â•d‚ÇÇ))
    go m‚â•m p‚â•d‚ÇÇ = yes z‚â§m
    go (s‚â•m p‚â•d‚ÇÅ) m‚â•m = no Œª ()
    go (s‚â•m p‚â•d‚ÇÅ) (s‚â•m p‚â•d‚ÇÇ) with go p‚â•d‚ÇÅ p‚â•d‚ÇÇ
    go (s‚â•m p‚â•d‚ÇÅ) (s‚â•m p‚â•d‚ÇÇ) | yes p = yes (s‚â§s p)
    go (s‚â•m p‚â•d‚ÇÅ) (s‚â•m p‚â•d‚ÇÇ) | no ¬¨p = no Œª { (s‚â§s x) ‚Üí ¬¨p x }

  _<_ : Mod p ‚Üí Mod p ‚Üí Set
  (zero  , _  ) < _ = ‚ä•
  (suc d , p‚â•d) < y = (d , s‚â•m p‚â•d) ‚â§ y

  _<?_ : Decidable _<_
  (zero  , _  ) <? _ = no (Œª z ‚Üí z)
  (suc d , p‚â•d) <? y = (d , s‚â•m p‚â•d) ‚â§? y

